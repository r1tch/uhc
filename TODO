- Logging - DONE
- Configuration - DONE
- Event loop + TCP server - DONE
- Modules one by one:
  - Remote controller, own protocol (TCP server)
    - first only allow from same network - DONE
    - authentication later:
      - pw in cfg file first
      - no auth if on same network (also config option)
      - otherwise simple challenge-response auth - http://www.hcsw.org/reading/chalresp.txt (challenge random data, resp: md5(data+pw))
    - ping: if same network, every 5 secs; otherwise every 60secs -- maybe only from client?
    - abstraction: Services, subscriber (events) & commands 
      - Service: one instance of each class (for now)
      - Controller: repository of services
      - Event: unsolicited, broadcast
      - Command: can have return value for query-response (eg, to query a list, etc)
      - note: response-reply
      - TcpServer also a Service
      - registered as listener in services
      - commands sent to TcpServer define a unique service ID (ZWave, IR)
      - Automators are services as well
      - Controller holds Services
  - ZWave - via json
    - async http - DONE
    - yes, json, simple: https://docs.python.org/2/library/json.html
    - dl devices - DONE
    - remote ctrl:
      - queryable list
      - on-off
  - Simple Android client; initially ZWave control only
  - XBMC
    - osmc2 - play music library from stora
    - remote control of osmc/kodi
  - IR -- lirc! No lib needed, proto is dead simple
  - Paradox
  - AutoShade -- using entry/exit/sunrise/sunset
  - SleepSecurity -- sleep detection, etc
  - Media -- movie mode & co
